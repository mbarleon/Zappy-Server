name: cextend_test

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    steps:
      - name: Cache coding style Docker image
        id: cache-docker-image
        uses: actions/cache@v4
        with:
          path: coding-style-checker.tar
          key: coding-style-checker-ghcr-latest

      - name: Load Docker image from cache or pull
        run: |
          if [ -f coding-style-checker.tar ]; then
            docker load -i coding-style-checker.tar
          else
            docker pull ghcr.io/epitech/coding-style-checker:latest
            docker save ghcr.io/epitech/coding-style-checker:latest -o coding-style-checker.tar
          fi

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run coding style check in container
        run: |
          docker run --platform linux/amd64 --rm --entrypoint bash -v "$PWD":"$PWD" -w "$PWD" ghcr.io/epitech/coding-style-checker:latest -c '
            declare -i error=0
            DIR=$(pwd)
            check.sh $DIR $DIR
            if test -s coding-style-reports.log; then
              while IFS= read -r line; do
                file=$(echo "$line" | cut -d":" -f1)
                line_num=$(echo "$line" | cut -d":" -f2-3)
                error_type=$(echo "$line" | cut -d" " -f2 | cut -d":" -f1)
                if [ "$error_type" = "MAJOR" ]; then
                  error+=3
                fi
                if [ "$error_type" = "MINOR" ]; then
                  error+=1
                fi
                error_name=$(echo "$line" | cut -d":" -f4)
                title="$error_type  coding style error:"
                echo "::error file=$file,line=$line_num::$title $error_name"
                if [ "$error" -ge 4 ]; then
                  echo "::error:: /!\\ TOO MANY CODING_STYLE INFRINGMENTS /!\\"
                  exit 1
                fi
              done < coding-style-reports.log
              echo "$error"
            else
              echo "::notice:: No coding-style error detected, good work."
            fi
          '

      - name: Remove log file
        run: rm -f coding-style-reports.log

  check_program_compilation_ubuntu:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check for build.sh
        run: |
          if [ ! -f "build.sh" ]; then
            echo "::error ::/!\\ WARNING NO build.sh FOUND /!\\"
            exit 84
          else
            echo "::notice::build.sh found."
          fi

      - name: Install build dependencies
        run: |
          if ! { command -v cmake > /dev/null; } 2>&1; then
            echo "::notice:: cmake not installed. Trying to install it."
            sudo apt update && sudo apt install -y cmake
          fi

      - name: Launch ./build.sh
        run: |
          if ./build.sh; then
            echo "::notice file=build.sh::Successfully compiled (./build.sh)."
          else
            echo "::error file=build.sh::/!\\ COMPILATION ERROR (./build.sh)/!\\"
            exit 84
          fi

      - name: Check executable
        run: |
          executable="${EXECUTABLE_PATH}"
          if [ ! -x "$executable" ]; then
            echo "::error file=$executable::Executable $executable is missing or not executable."
            exit 84
          else
            echo "::notice file=$executable::Executable $executable found and is executable."
          fi
        env:
          EXECUTABLE_PATH: ${{ vars.EXECUTABLE_PATH }}
